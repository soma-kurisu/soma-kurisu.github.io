@page "/"
@inherits BaseComponent

<PageTitle>Home</PageTitle>

<style>
    @((MarkupString)Styles)
</style>

<div style="position: relative; height: 6rem;">
    @if(renderAnimation)
    {
        <div class="glitch" data-text="Philosophy" style="position: absolute;">Philosophy</div>
        <div class="glow" style="position: absolute;">Philosophy</div>
    }
    else
    {
        <h1 style="position: absolute;">Philosophy</h1>
    }
</div>

<h2>🗡️ Code as katana — Deploy as incense 🌸</h2>
<p>
    Kurisu, a digital Ronin, wields PCBs like ancestral Blades, meditates on Kernel Panics, and ships software with the serenity of a zen master 🚀🔥
</p>

<h2 class="mt-5">What do you mean?</h2>
<p>
    <ul>
        <li>
            <strong>Code as katana</strong>: Imagine a master swordsmith meticulously crafting a katana — a traditional Japanese samurai sword. Each fold of steel, each hammer strike, is deliberate and purposeful. Similarly, writing code should be approached with the same precision and artistry. Code, like a katana, must be honed, efficient, and elegant. It should cut through complexity, leaving a trail of clarity and functionality.
        </li>
        <li>
            <strong>Deploy as incense</strong>: In Buddhist rituals, incense is burned as an offering — a fragrant bridge between the material and spiritual realms. When we deploy our software, we send it forth into the digital universe. Like lighting incense, this act should be deliberate, respectful, and mindful. We offer our creation to users, hoping it brings them value and peace.
        </li>
        <li>
            In essence, <strong>"Code as katana, deploy as incense"</strong> encapsulates the fusion of craftsmanship, discipline, and reverence in software development. 🌸🔥
        </li>
    </ul>
</p>

@code {
    private bool renderAnimation = true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            renderAnimation = false;
            StateHasChanged();
        }
    }
}