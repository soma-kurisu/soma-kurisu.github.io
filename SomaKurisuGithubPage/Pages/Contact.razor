@page "/contact"
@inject IJSRuntime JSRuntime
@inherits BaseComponent

<PageTitle>Contact</PageTitle>

<style>
    @((MarkupString)Styles)
</style>

<div class="container-fluid">
    <div class="row mt-0">
        <div class="col col-12 mt-0">
            <div style="position: relative; height: 3rem; display: flex; justify-content: left; align-items: center;">                @if(renderAnimation)
                {
                    <h1 style="margin: 0;">Contact</h1>
                    <div style="display:inline-block;" class="glitch" data-text="ðŸŒ¸">ðŸŒ¸</div>
                    <div style="display:inline-block;" class="glow">ðŸŒ¸</div>
                }
                else
                {
                    <h1 style="margin: 0;">Contact</h1>
                }
            </div>
        </div>
    </div>

    <div class="row mt-1">
        <div class="col col-12">
            <p>Choose how you would like to contact me</p>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col col-2">
            <div class="nav-item">
                <a class="nav-item px-3 @(currentOption == Option.None ? "active" : "")" @onclick="() => SetOption(Option.None)">
                    <span class="bi bi-cloud-lightning-rain-fill" aria-hidden="true"></span> Default
                </a>
            </div>
        </div>
        <div class="col col-2">
            <div class="nav-item">
                <a class="nav-item px-3 @(currentOption == Option.TwistedEdwards ? "active" : "")" @onclick="() => SetOption(Option.TwistedEdwards)">
                    <span class="bi bi-cloud-sun-fill" aria-hidden="true"></span> Alternative
                </a>
            </div>
        </div>
        <div class="col col-2">
            <div class="nav-item">
                <a class="nav-item px-3 @(currentOption == Option.Goldilocks ? "active" : "")" @onclick="() => SetOption(Option.Goldilocks)">
                    <span class="bi bi-brightness-high-fill" aria-hidden="true"></span> Prefered
                </a>
            </div>
        </div>
        <div class="col col-2">
            <div class="nav-item">
                <a class="nav-item px-3 @(currentOption == Option.Social ? "active" : "")" @onclick="() => SetOption(Option.Social)">
                    <span class="bi bi-brightness-low-fill" aria-hidden="true"></span> Social
                </a>
            </div>
        </div>
    </div>

    <div class="row mt-5 mb-3">
        <div class="col col-12">
            <p>Contact information for <strong>@DisplayOption</strong>.</p>
        </div>
    </div>

@switch(currentOption)
{
    case Option.Social:
        <div class="row">
            <div class="col col-4">
                <p>If you'd like to DM me, use my matrix handle.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://matrix.to/#/@@soma-kurisu:matrix.org" target="_blank" rel="me">
                        <span class="matrix-logo-bg" aria-hidden="true"></span> @@soma-kurisu:matrix.org
                    </a>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col col-4">
                <p>All things ActivityPub are excitingly great, and so is Mastodon. No need to say, I prefer this handle.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://hachyderm.io/@@SomaKurisu" target="_blank" rel="me">
                        <span class="bi bi-mastodon" aria-hidden="true"></span> @@SomaKurisu@hachyderm.io
                    </a>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col col-4">
                <p>Sooner or later I'm gonna drop this identity for sure.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://twitter.com/SomaKurisu" target="_blank" rel="me">
                        <span class="bi bi-twitter-x" aria-hidden="true"></span> @@SomaKurisu
                    </a>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col col-4">
                <p>If you still canâ€™t get enough of me, I have another irrational social interaction going on here.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://www.linkedin.com/in/soma-kurisu/" target="_blank" rel="me">
                        <span class="bi bi-linkedin" aria-hidden="true" style="margin-right: 1.4rem;"></span> in/soma-kurisu
                    </a>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col col-4">
                <p>Most of my public coding can be found here.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://github.com/soma-kurisu" target="_blank" rel="me">
                        <span class="sr-only" aria-hidden="true">
                            <img src="https://github.githubassets.com/assets/github-mark-9be88460eaa6.svg" class="d-inline" loading="lazy" decoding="async" alt="GitHub mark" style="width: 1.8rem; height: 1.8rem; margin-right: 1rem; margin-left: -0.3rem;">
                        </span> soma-kurisu
                    </a>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col col-4">
                <p>To cuddle, squeeze and hug my machine learning models, please go here.</p>
            </div>
            <div class="col col-auto">
                <div class="nav-item">
                    <a class="nav-item px-3" href="https://huggingface.co/sca-ai" target="_blank" rel="me">
                        <span class="hf-logo-pirate" aria-hidden="true"></span> sca-ai
                    </a>
                </div>
            </div>
        </div>
        break;
    case Option.Goldilocks:
        /* Blazor does not support raw string literals yet */
        info = @"
        Keys and expiry info

        sub   ed448 2024-04-01 [S] [expires: 2025-04-01]
        sub   cv448 2024-04-01 [E] [expires: 2025-04-01]
        ".Replace(new String(' ', 8), string.Empty);
        keys = @"
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mEkFZgsC8xYAAAA/AytlcQHI3ZEph7WwRQbNtj3KnjiYzkyOkgW5uyGYUnqL8HYl
        o55Ucz7spHnYwLQVty9k4VZva2TBejoGVEWAtCBTT01BIEt1cmlzdSAoUHJpbWFy
        eSBHb2xkaWxvY2tzKYjNBRMWCgBNIiEFuuZBfXc1MAmzZUvNZC0PtKDiGgZUI1c9
        bxT1WGiTjFIFAmYLAvMCGwMFCQtHNQAFCwkIBwICIgIGFQoJCAsCBBYCAwECHgcC
        F4AAAONaAcMHIBFjyqFmFQhG1SppNIzanmibbCtugf7RwUszovqoCuGEu70ZFc+U
        jTjUjoc2fKvZMdRievVxKwABxi6cia8oYDjLZRrUdwacHUf6ETwfjQsRWZGlt6/M
        AFdu8zH4TjowTIVkhVbOgSKhvWmLqAFYhe0RALRIU09NQSBLdXJpc3UgKFByaW1h
        cnkgR29sZGlsb2NrcyBTaWduaW5nIElkZW50aXR5KSA8MHhlMjgzNmNiNEBnbWFp
        bC5jb20+iM0FExYKAE0iIQW65kF9dzUwCbNlS81kLQ+0oOIaBlQjVz1vFPVYaJOM
        UgUCZgsQ7gIbAwUJC0c1AAULCQgHAgIiAgYVCgkICwIEFgIDAQIeBwIXgAAAJTsB
        yPJVZ5L+rRYGuuRS9/xA1l68tPEVNyt16mG52fnMTpTs42mxCtsKBMWuWYD03AcA
        sTwQIgAKM30KgAHHYDs27KzLEtdtAaaZDT1UWQ8oEFdCOnBYpMIPoR2FwbdJ8BFg
        bkE3DhOBid4sqEwM7aLeKj1cXw0AuEkFZgsDnRYAAAA/AytlcQHIt1ISjdcMyr07
        d6T/vHZL3uqKrQTgj0+tgZrQh4VlHWqQxZm07nZVGyvec9RKfORFxtZv+1/nGYOA
        iQFdBRgWCgAyIiEFuuZBfXc1MAmzZUvNZC0PtKDiGgZUI1c9bxT1WGiTjFIFAmYL
        A50CGwIFCQHhM4AAq6ogBRkWCgApIiEFawYq04lUMEdUXYmJDfampjRGJEIG482S
        vihQhGXyQ1EFAmYLA50AAP3DAcisstm0pJ72VGQSeHJNoVNLD/M3fnA9hb/5f1Cb
        7wdUunQdX1FhwCjkLoRt2CsyPN1YKveyqxyRfQAByO7CaZR5TSfHgPXAJrYgXG2/
        syCJsODIySKfX8+TeHYD9EFaRB+QjSA3bzo2lWjaLgfzM4DEyyYbAPz1AcdFEYaa
        rk3LZfCZvqXfCg6Cm5Ji6hj9gStX7vOnBv8UGjuLa8OXeqoRbG16TKKEaIxgxpbB
        auUHJAAByNhXwLsg1AE9FJMMq7NKZOT3uyOQkt0b1Ses/xdZZdPDk358zJ+3eoOf
        Eg+uJgr1mzPpW5P5P9wnALhMBWYLBCkSAAAAQgMrZW8BvR6OCl+TpLVJNAixFONW
        aP9/Rh2ZmaNQj2pKBvT5avlJdcOJ6wAkHLZM6rMp+KgQlGXbbHiQDANtAwEKCYiy
        BRgWCgAyIiEFuuZBfXc1MAmzZUvNZC0PtKDiGgZUI1c9bxT1WGiTjFIFAmYLBCkC
        GwwFCQHhM4AAAM3ZAcd55FSHA2SvNij/bOnuVmmGWlZvN+5HTIWb1PSrU+/mbezZ
        4BCNj+vuSyHuN98HLv34SOv2CIblKYABx09AjfjlpYtgervOlcP/nBrTVCXG12Uo
        s+CkQMO9B59MxPZujapjtCv0xK20LaPLSP1ZVg2x/+gVAA==
        =W8Id
        -----END PGP PUBLIC KEY BLOCK-----
        ".Replace(new String(' ', 8), string.Empty);
        <div class="row">
            <div class="col col-12">
                <p>This is my primary key. But since most keyservers and centralized code repositories still miss Goldilocks you may consider using my Twisted Edwards keys.</p>
            </div>
        </div>
        <div class="row">
            <div class="col col-4">
                <pre class="overflow-hidden">
                    <code>
                        @keys
                    </code>
                </pre>
            </div>
            <div class="col col-6 px-2">
                <div class="row px-4">
                    <div class="col col-12">
                        <pre class="overflow-hidden">
                            <code>
                                @info
                            </code>
                        </pre>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col col-auto">
                        <div class="nav-item">
                            <a class="nav-item px-3" href="" @onclick="CopyKeys" @onclick:preventDefault>
                                <span class="bi bi-copy" aria-hidden="true"></span>
                                Copy Keys
                            </a>
                        </div>
                    </div>
                    <div class="col col-auto">
                        <div class="nav-item">
                            <a class="nav-item px-3" href="mailto:0xe2836cb4@gmail.com?body=---fpr:BAE6417D77353009B3654BCD642D0FB4A0E21A065423573D6F14F55868938C52---">
                                <span class="bi bi-send-fill" aria-hidden="true"></span>
                                Create Mail
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        break;
    case Option.TwistedEdwards:
        /* Blazor does not support raw string literals yet */
        info = @"
        Keys and expiry info

        pub   ed25519 2024-04-01 [SC] [expires: 2025-04-01]
        ".Replace(new String(' ', 8), string.Empty);
        keys = @"
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mDMEZgsSWRYJKwYBBAHaRw8BAQdA4D3Im4jmMo3iJr4y1sJz8CMs+uDdhrgE1IOG
        HeoBBLa0XlNPTUEgS3VyaXN1IC0gb2N0b2NhdCAob2N0b2NhdCBjb21taXQgc2ln
        bmluZyBzdGlsbCBtaXNzZXMgZ29sZGlsb2NrcyEpIDwweGUyODM2Y2I0QGdtYWls
        LmNvbT6ImQQTFgoAQRYhBISab48xkbEySvVED3xiKvGbKDQIBQJmCxJZAhsDBQkB
        4TOABQsJCAcCAiICBhUKCQgLAgQWAgMBAh4HAheAAAoJEHxiKvGbKDQI8v0A/2Ko
        DsoX/3JrUkAFimJQ9WfuzTYmawPSFsqndkVWShNEAP0doQCai/thyBY618j/L+Ng
        0CFAj4Bd5bbgqq1pS0VLDIipBRAWCgApIiEFuuZBfXc1MAmzZUvNZC0PtKDiGgZU
        I1c9bxT1WGiTjFIFAmYLIQUAAOcyAcdlA6MqsZm0QI1z00uRkse5FCxOjiJF2zKb
        aax0t2yada7X3QJcnVrW0/OmRagiPbsocuhwQT0cywABxRjVOplimIHJZiLSKi4a
        Axhyx1/RDaH02O6r2HfifmIJj3VzSyjnzMO/RJE7OCq5j0lSVKEje1UhALg4BGYL
        ElkSCisGAQQBl1UBBQEBB0AiUq0guN9IXdX6PGawHDRC7ArJu17lWi9/9d27KvKd
        VAMBCAeIfgQYFgoAJhYhBISab48xkbEySvVED3xiKvGbKDQIBQJmCxJZAhsMBQkB
        4TOAAAoJEHxiKvGbKDQI3fwBAJP9MJvUcB2BbKLoOvE+SwCWI06pB9uUOGcgaNqS
        dhlXAQCf67EResDImhUCAYiCjK3KZunO5LU7llfWKV7yr0c5AQ==
        =h3c4
        -----END PGP PUBLIC KEY BLOCK-----
        ".Replace(new String(' ', 8), string.Empty);
        <div class="row">
            <div class="col col-12">
                <p>Most keyservers and centralized code repositories still miss Goldilocks. So this pair of Twisted Edwards of mine is still frequently used but rotates more often than my primary keys.</p>
                <div>
                    You can verify keys and their expiry info on one of the various keyservers, like
                    <p class="nav-item" style="display:inline-block;">
                        <a class="nav-item px-1" style="display:inherit;" href="https://keys.openpgp.org/vks/v1/by-fingerprint/849A6F8F3191B1324AF5440F7C622AF19B283408">
                            <span class="bi bi-shield-lock-fill-bg" aria-hidden="true"></span>
                            keys.openpgp.org
                        </a>.
                    </p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-4">
                <pre class="overflow-hidden">
                    <code>
                        @keys
                    </code>
                </pre>
            </div>
            <div class="col col-6 px-2">
                <div class="row px-0">
                    <div class="col col-12">
                        <pre class="overflow-hidden">
                            <code>
                                @info
                            </code>
                        </pre>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col col-auto">
                        <div class="nav-item">
                            <a class="nav-item px-3" href="" @onclick="CopyKeys" @onclick:preventDefault>
                                <span class="bi bi-copy" aria-hidden="true"></span>
                                Copy Keys
                            </a>
                        </div>
                    </div>
                    <div class="col col-auto">
                        <div class="nav-item">
                            <a class="nav-item px-3" href="mailto:0xe2836cb4@gmail.com?body=---fpr:849A6F8F3191B1324AF5440F7C622AF19B283408---">
                                <span class="bi bi-send-fill" aria-hidden="true"></span>
                                Create Mail
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        break;
    default:
    case Option.None:
        <div class="row">
            <div class="col col-12">
                <div>
                    For all the brave-hearted cyber-martyrs out there, unirritatedly believing in the benevolence within the bioorganisms inhabiting Terra Mater, or at least show faith in the inherent goodness within human individuals, just go ahead and 
                    <p class="nav-item" style="display:inline-block;">
                        <a class="nav-item px-1" style="display:inherit;" href="mailto:0xe2836cb4@gmail.com">
                            <span class="bi bi-send-fill" aria-hidden="true"></span>
                            drop me an unencrypted e-mail
                        </a>
                    </p>
                    , but then still consider securing your code in your day-to-day work.
                </div>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col col-12">
                <p>
                    As developers, safeguarding our code and communications is paramount. Enter GnuPG (GNU Privacy Guard) keys - a powerful tool for privacy and authenticity.
                    Why GnuPG?

                    <ul>
                        <li><strong>Encryption</strong>: Encrypt sensitive data - whether it's configuration files, API keys, or user credentials. With GnuPG, only authorized parties can decipher the content.</li>
                        <li><strong>Digital Signatures</strong>: Sign your commits, tags, and releases. A signed commit ensures that it originated from you, preventing tampering or unauthorized changes.</li>
                    </ul>

                    Cryptography has come a long way, from ancient methods of encryption like Caesar ciphers to modern cryptographic techniques such as RSA and AES, and now even post-quantum cryptography algorithms like Kyber.
                    ElGamal, for example, was an early modern asymmetric cryptographic system based on the difficulty of the discrete logarithm problem. Although it's no longer used, its easy-to-grasp algorithm is still a great example to get you started.
                    A rich selection of post-quantum cryptographic algorithms already exists, but most cryptographic tools and libraries out there still lack them.
                    So, let's consider my current keys.

                    <h3 class="mt-5">Goldilocks versus Twisted Edwards</h3>
                    <ul>
                        <li><strong>Goldilocks</strong>: A curve with robust security properties. Unfortunately, it's not universally supported across all channels, devices, and tools..</li>
                        <li><strong>Twisted Edwards</strong>: A pragmatic alternative. It enjoys broader compatibility and many platforms already embrace it.</li>
                    </ul>

                    <p>
                        <h3 class="mt-5">
                            <span class="bi bi-fullscreen" aria-hidden="true"></span>
                                Remember: Privacy is not a fairy tale - it's a developer's responsibility
                        </h3>
                    </p>

                    <p>
                        <h3 class="mt-5">
                            While there are numerous alternatives to GnuPG and libgcrypt, and I even advocate for SOPS in Kubernetes deployments, conservative communication between entities remains common.

                            For this reason, you have several options:
                        </h3>
                    </p>

                    <ul>
                        <li>
                            <strong>Plaintext Email</strong>: If simplicity and familiarity are your priorities, feel free to email me plaintext.
                        </li>

                        <li>
                            <strong>Twisted Edwards Key</strong>: Opt for my shorter-lived, frequently rotated Twisted Edwards key. It's a pragmatic choice with broader compatibility.
                        </li>

                        <li>
                            <strong>Primary Goldilocks Key</strong>: For robust security, choose my primary Goldilocks key. It offers excellent protection but may not be universally supported.
                        </li>
                    </ul>

                    The choice is yours. Select the key that aligns best with your needs and communication channels.
                </p>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col col-12">
                <h3>Let's apply the grand three properties commonly associated with public key cryptography on our day-to-day work.</h3>
                <ul>
                    <li>
                        <strong>Confidentiality</strong>
                        <p><strong>What It Means:</strong> Confidentiality ensures that sensitive information remains private and inaccessible to unauthorized parties. When data is encrypted using GnuPG, only authorized recipients can decrypt and access it.</p>
                        <p><strong>Software Development Example:</strong> Imagine you're developing a web application that connects to a database. You store the database credentials (username and password) in a configuration file. To maintain confidentiality, you use GnuPG to encrypt this configuration file. Now, even if someone gains access to the file, they won't be able to decipher the credentials without the decryption key.</p>
                        <p><strong>Container Image Example:</strong> When building a container image, you might include environment variables containing sensitive information (e.g., API keys, database connection strings). Encrypt these variables using GnuPG before adding them to the image. This way, even if the image is compromised, the sensitive data remains confidential.</p>
                    </li>
                    <li>
                        <strong>Integrity</strong>
                        <p><strong>What It Means:</strong> Integrity ensures that data remains unchanged and unaltered during transmission or storage. GnuPG achieves this through digital signatures, which verify the authenticity and integrity of files.</p>
                        <p><strong>Software Development Example:</strong> Suppose you're distributing a software release package. Before sharing it, sign the package using your GnuPG private key. Recipients can verify the package's integrity by checking the digital signature against your public key. If the package has been tampered with, the signature won't match, alerting users to potential issues.</p>
                        <p><strong>Container Image Example:</strong> When pushing a container image to a registry, sign it with your GnuPG key. Users pulling the image can verify its integrity using your public key. If the image has been modified (perhaps due to a security breach), the signature won't validate, preventing its use.</p>
                    </li>
                    <li>
                        <strong>Authenticity</strong>
                        <p><strong>What It Means:</strong> Authenticity verifies the identity of the sender and ensures that the received data or software originates from a trusted source. In software development and container images, authenticity ensures that the code or image is from a legitimate source and has not been tampered with by malicious actors.</p>
                        <p><strong>Software Development Example:</strong> In an open-source project, developers sign their commits using keys. This authenticates their contributions and establishes trust within the community. Users can verify the authorship of code changes by checking the commit signatures.</p>
                        <p><strong>Container Image Example:</strong> When pulling a container image, verify its authenticity by checking the image's signature against the author's key. If the image is signed by a trusted entity (e.g., the official repository maintainer), you can be confident in its origin.</p>
                    </li>
                </ul>
                    
                <p>
                    <h3 class="mt-5">
                        <span class="bi bi-fullscreen" aria-hidden="true"></span>
                            Remember that managing keys is crucial. Keep your private key secure, and share your public key widely to enable others to verify your signatures. By incorporating these properties, GnuPG enhances security across various software-related contexts!
                    </h3>
                </p>

                <h2 class="mt-5">GnuPG and SOPS: Secure Key Management</h2>

                <section>
                    <h3 class="mt-5">Key Management Best Practices</h3>
                    <p>Effective key management is crucial for maintaining the security and integrity of cryptographic systems. Here are some best practices:</p>
                    <ul>
                    <li><strong>Use Strong Passphrases:</strong> Ensure that your private keys are protected by strong passphrases. A passphrase should be lengthy, complex, and unique.</li>
                    <li><strong>Regularly Rotate Keys:</strong> Periodically rotate your keys, especially if they're used in critical systems or if there's a chance they've been compromised. This minimizes the impact of a potential breach.</li>
                    <li><strong>Secure Key Storage:</strong> Store your private keys securely, preferably in a hardware security module (HSM) or a secure key management service. Avoid storing keys on vulnerable or shared systems.</li>
                    <li><strong>Backup Keys:</strong> Regularly backup your keys and securely store the backups offline. This ensures that you can recover your keys in case of loss or hardware failure.</li>
                    <li><strong>Implement Key Revocation:</strong> Have a process in place for revoking compromised or unused keys. This prevents unauthorized use of keys that may have been compromised.</li>
                    <li><strong>Regular Audits:</strong> Perform regular audits of key usage and access permissions to detect any anomalies or unauthorized activities.</li>
                    <li><strong>Key Separation:</strong> Consider separating keys for different purposes (e.g., signing keys, encryption keys) to minimize the impact of a compromise.</li>
                    </ul>
                </section>
                <section>
                    <h3 class="mt-5">Integration of GnuPG and SOPS in CI/CD Pipelines</h3>
                    <p>GnuPG and SOPS provide a robust and secure solution for managing secrets and sensitive data in CI/CD pipelines, offering an alternative to cloud-based key management solutions. Here's how you can leverage them effectively:</p>
                    <ul>
                    <li><strong>Control Over Key Management:</strong> With GnuPG and SOPS, you have full control over key generation, storage, and access. You're not reliant on third-party cloud providers for key management, reducing potential dependencies and security risks associated with cloud services.</li>
                    <li><strong>End-to-End Encryption:</strong> GnuPG and SOPS enable end-to-end encryption of secrets and sensitive data throughout your CI/CD pipelines. This ensures that your secrets remain encrypted at rest and in transit, providing strong protection against unauthorized access or data breaches.</li>
                    <li><strong>Customizable Security Policies:</strong> You can tailor security policies and access controls according to your specific requirements when using GnuPG and SOPS. This flexibility allows you to enforce granular access permissions and encryption standards that align with your organization's security policies and compliance requirements.</li>
                    <li><strong>Offline Key Storage:</strong> GnuPG supports offline key storage options, such as hardware security modules (HSMs) or air-gapped systems, providing an additional layer of protection against online threats and unauthorized access.</li>
                    <li><strong>Cost-Efficiency:</strong> By leveraging GnuPG and SOPS for key management in CI/CD pipelines, you can potentially reduce operational costs associated with cloud-based key management solutions, as there are no subscription fees or usage charges for using open-source software.</li>
                    <li><strong>Community Support and Transparency:</strong> GnuPG and SOPS benefit from active community support and undergo regular security audits, ensuring transparency and reliability in their implementation. This fosters trust and confidence in the security of your CI/CD pipelines and secret management practices.</li>
                    </ul>
                    <p>By adopting GnuPG and SOPS in your CI/CD pipelines, you can achieve robust and secure secret management capabilities without relying on cloud-based key management solutions, offering greater control, flexibility, and cost-efficiency for your organization's security needs.</p>
                </section>

                <p>
                    <h3 class="mt-5">
                        <span class="bi bi-fullscreen" aria-hidden="true"></span>
                        I'm already getting overly enthusiastic again. We have to stop here. This is just a Contact page and not a Techromancenovell.
                    </h3>
                </p>
            </div>
        </div>
        break;
}
</div>

@code {
    private enum Option { None, Goldilocks, TwistedEdwards, Social }
    private Option currentOption = Option.Social;
    private string DisplayOption => currentOption switch {
        Option.Social => "my social media handles",
        Option.Goldilocks => "my spinal tap-grade security keys",
        Option.TwistedEdwards => "my all-day, all-purpose keys",
        _ => "unencrypted plain text e-mail",
    };
    private bool renderAnimation = true;
    
    private void SetOption(Option selectedOption) => currentOption = selectedOption;

    private string info = string.Empty;
    private string keys = string.Empty;

    async Task CopyKeys()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", keys);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(666);
            renderAnimation = false;
            StateHasChanged();
        }
    }
}